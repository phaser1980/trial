{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\trial\\\\src\\\\pages\\\\GamePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Grid, Card, CardContent, Typography, Button, Box, ButtonGroup } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = () => {\n  _s();\n  const [sequence, setSequence] = useState([]);\n  const symbols = ['♠', '♥', '♦', '♣'];\n\n  // Load sequence from database when component mounts\n  useEffect(() => {\n    const loadSequence = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/sequences/1');\n        const data = await response.json();\n        setSequence(data.map(item => ({\n          value: item.symbol,\n          timestamp: new Date(item.timestamp).getTime()\n        })));\n      } catch (error) {\n        console.error('Error loading sequence:', error);\n      }\n    };\n    loadSequence();\n  }, []);\n  const addSymbol = async value => {\n    const newSymbol = {\n      value,\n      timestamp: Date.now()\n    };\n    try {\n      await fetch('http://localhost:5000/api/sequences/1/symbol', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          value\n        })\n      });\n      setSequence(prev => [...prev, newSymbol]);\n    } catch (error) {\n      console.error('Error adding symbol:', error);\n    }\n  };\n  const simulateSequence = async () => {\n    for (let i = 0; i < 90; i++) {\n      const randomValue = Math.floor(Math.random() * 4);\n      await addSymbol(randomValue);\n      // Small delay to prevent overwhelming the server\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  };\n  const clearDatabase = async () => {\n    try {\n      await fetch('http://localhost:5000/api/sequences/cleanup', {\n        method: 'DELETE'\n      });\n      setSequence([]);\n    } catch (error) {\n      console.error('Error clearing database:', error);\n    }\n  };\n  const startNew = async () => {\n    await clearDatabase(); // Clear database when starting new\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"Card Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        sx: {\n          mb: 4\n        },\n        children: symbols.map((symbol, index) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            fullWidth: true,\n            onClick: () => addSymbol(index),\n            sx: {\n              fontSize: '2rem',\n              height: '80px'\n            },\n            children: symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(ButtonGroup, {\n          variant: \"contained\",\n          color: \"secondary\",\n          fullWidth: true,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: simulateSequence,\n            children: \"Generate 90 Random\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: clearDatabase,\n            children: \"Clear Database\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: startNew,\n            children: \"Start New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Current Sequence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 1,\n              maxHeight: '200px',\n              overflowY: 'auto'\n            },\n            children: sequence.map((item, index) => /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontSize: '1.5rem'\n              },\n              children: symbols[item.value]\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"PFuLSHCXzedz8ney6TyhpEyvnY8=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","Container","Grid","Card","CardContent","Typography","Button","Box","ButtonGroup","jsxDEV","_jsxDEV","GamePage","_s","sequence","setSequence","symbols","loadSequence","response","fetch","data","json","map","item","value","symbol","timestamp","Date","getTime","error","console","addSymbol","newSymbol","now","method","headers","body","JSON","stringify","prev","simulateSequence","i","randomValue","Math","floor","random","Promise","resolve","setTimeout","clearDatabase","startNew","maxWidth","children","sx","mt","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","mb","index","xs","fullWidth","onClick","fontSize","height","color","display","flexWrap","gap","maxHeight","overflowY","_c","$RefreshReg$"],"sources":["C:/Users/User/trial/src/pages/GamePage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Container, \n  Grid, \n  Card, \n  CardContent, \n  Typography, \n  Button,\n  Box,\n  ButtonGroup\n} from '@mui/material';\n\ninterface CardSymbol {\n  value: number;\n  timestamp: number;\n}\n\nconst GamePage: React.FC = () => {\n  const [sequence, setSequence] = useState<CardSymbol[]>([]);\n  const symbols = ['♠', '♥', '♦', '♣'];\n\n  // Load sequence from database when component mounts\n  useEffect(() => {\n    const loadSequence = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/sequences/1');\n        const data = await response.json();\n        setSequence(data.map((item: any) => ({\n          value: item.symbol,\n          timestamp: new Date(item.timestamp).getTime()\n        })));\n      } catch (error) {\n        console.error('Error loading sequence:', error);\n      }\n    };\n\n    loadSequence();\n  }, []);\n\n  const addSymbol = async (value: number) => {\n    const newSymbol: CardSymbol = {\n      value,\n      timestamp: Date.now()\n    };\n    \n    try {\n      await fetch('http://localhost:5000/api/sequences/1/symbol', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ value }),\n      });\n      \n      setSequence(prev => [...prev, newSymbol]);\n    } catch (error) {\n      console.error('Error adding symbol:', error);\n    }\n  };\n\n  const simulateSequence = async () => {\n    for (let i = 0; i < 90; i++) {\n      const randomValue = Math.floor(Math.random() * 4);\n      await addSymbol(randomValue);\n      // Small delay to prevent overwhelming the server\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  };\n\n  const clearDatabase = async () => {\n    try {\n      await fetch('http://localhost:5000/api/sequences/cleanup', {\n        method: 'DELETE',\n      });\n      setSequence([]);\n    } catch (error) {\n      console.error('Error clearing database:', error);\n    }\n  };\n\n  const startNew = async () => {\n    await clearDatabase(); // Clear database when starting new\n  };\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box sx={{ mt: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Card Game\n        </Typography>\n        \n        <Grid container spacing={2} sx={{ mb: 4 }}>\n          {symbols.map((symbol, index) => (\n            <Grid item xs={3} key={index}>\n              <Button \n                variant=\"contained\" \n                fullWidth \n                onClick={() => addSymbol(index)}\n                sx={{ fontSize: '2rem', height: '80px' }}\n              >\n                {symbol}\n              </Button>\n            </Grid>\n          ))}\n        </Grid>\n\n        <Box sx={{ mb: 4 }}>\n          <ButtonGroup variant=\"contained\" color=\"secondary\" fullWidth>\n            <Button onClick={simulateSequence}>\n              Generate 90 Random\n            </Button>\n            <Button onClick={clearDatabase}>\n              Clear Database\n            </Button>\n            <Button onClick={startNew}>\n              Start New\n            </Button>\n          </ButtonGroup>\n        </Box>\n\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Current Sequence\n            </Typography>\n            <Box sx={{ \n              display: 'flex', \n              flexWrap: 'wrap', \n              gap: 1, \n              maxHeight: '200px', \n              overflowY: 'auto' \n            }}>\n              {sequence.map((item, index) => (\n                <Typography key={index} sx={{ fontSize: '1.5rem' }}>\n                  {symbols[item.value]}\n                </Typography>\n              ))}\n            </Box>\n          </CardContent>\n        </Card>\n      </Box>\n    </Container>\n  );\n};\n\nexport default GamePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}