{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\trial\\\\src\\\\pages\\\\AnalysisPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Typography, Box, Paper, CircularProgress, Alert, Grid, Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, ButtonGroup, Divider } from '@mui/material';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip as ChartTooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, ChartTooltip, Legend);\nconst AnalysisPage = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [sequences, setSequences] = useState([]);\n  const [analysisData, setAnalysisData] = useState({});\n  const [generatingData, setGeneratingData] = useState(false);\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('http://localhost:5000/api/sequences/1');\n      const data = await response.json();\n      if (!data || !Array.isArray(data.symbols)) {\n        console.error('Invalid sequence data received:', data);\n        setError('Invalid data format received from server');\n        setSequences([]);\n        return;\n      }\n      setSequences(data.symbols);\n      if (data.analyses) {\n        setAnalysisData(data.analyses);\n      }\n    } catch (err) {\n      console.error('Error fetching analysis data:', err);\n      setError('Failed to fetch analysis data');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const generateTestData = async () => {\n    try {\n      setGeneratingData(true);\n      setError(null);\n      const response = await fetch('http://localhost:5000/api/sequences/generate-test-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          count: 90\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to generate test data');\n      }\n      await fetchData(); // Refresh the analysis after generating data\n    } catch (err) {\n      console.error('Error generating test data:', err);\n      setError('Failed to generate test data');\n    } finally {\n      setGeneratingData(false);\n    }\n  };\n  const clearData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('http://localhost:5000/api/sequences/cleanup', {\n        method: 'POST'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to clear data');\n      }\n      await fetchData(); // Refresh after clearing\n    } catch (err) {\n      console.error('Error clearing data:', err);\n      setError('Failed to clear data');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const renderTransitionMatrix = () => {\n    var _analysisData$markovC;\n    if (!((_analysisData$markovC = analysisData.markovChain) !== null && _analysisData$markovC !== void 0 && _analysisData$markovC.matrix)) return null;\n    const matrix = analysisData.markovChain.matrix;\n    const symbols = Array.from(new Set([...Object.keys(matrix), ...Object.values(matrix).flatMap(row => Object.keys(row))])).sort();\n    return /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      sx: {\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        size: \"small\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"From \\u2193 To \\u2192\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this), symbols.map(symbol => /*#__PURE__*/_jsxDEV(TableCell, {\n              children: symbol\n            }, symbol, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: symbols.map(fromSymbol => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              component: \"th\",\n              scope: \"row\",\n              children: fromSymbol\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this), symbols.map(toSymbol => {\n              var _matrix$fromSymbol;\n              return /*#__PURE__*/_jsxDEV(TableCell, {\n                children: (((_matrix$fromSymbol = matrix[fromSymbol]) === null || _matrix$fromSymbol === void 0 ? void 0 : _matrix$fromSymbol[toSymbol]) || 0).toFixed(2)\n              }, toSymbol, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 19\n              }, this);\n            })]\n          }, fromSymbol, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this);\n  };\n  const renderPredictionCard = (title, prediction, confidence, accuracy, extraInfo) => /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      p: 3,\n      height: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        children: \"Next Symbol Prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: prediction !== null ? prediction : 'N/A'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: [\"Confidence: \", (confidence * 100).toFixed(1), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: [\"Historical Accuracy: \", (accuracy * 100).toFixed(1), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), extraInfo]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n  const renderChart = () => {\n    if (!Array.isArray(sequences) || sequences.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"info\",\n        children: \"No sequence data available yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 14\n      }, this);\n    }\n    const chartData = {\n      labels: sequences.map((_, index) => index + 1),\n      datasets: [{\n        label: 'Symbol Values',\n        data: sequences,\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }]\n    };\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        title: {\n          display: true,\n          text: 'Sequence Pattern'\n        }\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 12\n    }, this);\n  };\n  if (loading && !generatingData) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"200px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4,\n        mb: 4,\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: \"Analysis Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n        variant: \"contained\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 24\n          }, this),\n          onClick: generateTestData,\n          disabled: loading || generatingData,\n          children: \"Generate Test Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 24\n          }, this),\n          onClick: clearData,\n          disabled: loading || generatingData,\n          color: \"error\",\n          children: \"Clear Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          startIcon: /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 24\n          }, this),\n          onClick: fetchData,\n          disabled: loading || generatingData,\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 3\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            p: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Sequence Overview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this), sequences.length === 0 ? /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"info\",\n            children: \"No sequences recorded yet. Use the \\\"Generate Test Data\\\" button above to create test data, or add symbols manually in the Game page.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Total Symbols: \", sequences.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            p: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Pattern Visualization\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this), renderChart()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), analysisData.markovChain && /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: renderPredictionCard('Markov Chain Analysis', analysisData.markovChain.prediction, analysisData.markovChain.confidence, analysisData.markovChain.accuracy, /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            sx: {\n              mt: 3\n            },\n            children: \"Transition Matrix\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            gutterBottom: true,\n            children: \"This matrix shows the probability of transitioning from one symbol to another. Each cell represents P(column|row) - the probability of getting the column's symbol after seeing the row's symbol.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 17\n          }, this), renderTransitionMatrix()]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: analysisData.entropy && renderPredictionCard('Entropy Analysis', analysisData.entropy.prediction, analysisData.entropy.confidence, analysisData.entropy.accuracy, /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Divider, {\n            sx: {\n              my: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: [\"Entropy Score: \", analysisData.entropy.entropy.toFixed(3)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: \"Lower entropy indicates more predictable patterns, while higher entropy suggests more randomness.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: analysisData.chiSquare && renderPredictionCard('Chi-Square Test', analysisData.chiSquare.prediction, analysisData.chiSquare.confidence, analysisData.chiSquare.accuracy, /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Divider, {\n            sx: {\n              my: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: [\"\\u03C7\\xB2 Value: \", analysisData.chiSquare.chiSquare.toFixed(3)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: [\"p-value: \", analysisData.chiSquare.pValue.toFixed(3)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: [\"A low p-value (\", \"<\", \" 0.05) suggests the sequence is not random.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: analysisData.monteCarlo && renderPredictionCard('Monte Carlo Simulation', analysisData.monteCarlo.prediction, analysisData.monteCarlo.confidence, analysisData.monteCarlo.accuracy, /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Divider, {\n            sx: {\n              my: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: [\"Based on \", analysisData.monteCarlo.simulations.toLocaleString(), \" simulations\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: \"Predictions are made by running multiple simulations using the observed probability distribution.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n};\n_s(AnalysisPage, \"XNLext2x+mLX04LgmA5PwPuvNVY=\");\n_c = AnalysisPage;\nexport default AnalysisPage;\nvar _c;\n$RefreshReg$(_c, \"AnalysisPage\");","map":{"version":3,"names":["React","useState","useEffect","Container","Typography","Box","Paper","CircularProgress","Alert","Grid","Button","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","ButtonGroup","Divider","RefreshIcon","AddIcon","DeleteIcon","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","ChartTooltip","Legend","jsxDEV","_jsxDEV","Fragment","_Fragment","register","AnalysisPage","_s","loading","setLoading","error","setError","sequences","setSequences","analysisData","setAnalysisData","generatingData","setGeneratingData","fetchData","response","fetch","data","json","Array","isArray","symbols","console","analyses","err","generateTestData","method","headers","body","JSON","stringify","count","ok","Error","clearData","renderTransitionMatrix","_analysisData$markovC","markovChain","matrix","from","Set","Object","keys","values","flatMap","row","sort","component","sx","mt","children","size","fileName","_jsxFileName","lineNumber","columnNumber","map","symbol","fromSymbol","scope","toSymbol","_matrix$fromSymbol","toFixed","renderPredictionCard","title","prediction","confidence","accuracy","extraInfo","elevation","p","height","variant","gutterBottom","mb","color","renderChart","length","severity","chartData","labels","_","index","datasets","label","borderColor","tension","options","responsive","plugins","legend","position","display","text","justifyContent","alignItems","minHeight","startIcon","onClick","disabled","container","spacing","item","xs","md","entropy","my","chiSquare","pValue","monteCarlo","simulations","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/User/trial/src/pages/AnalysisPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Typography,\n  Box,\n  Paper,\n  CircularProgress,\n  Alert,\n  Grid,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Tooltip,\n  ButtonGroup,\n  Divider\n} from '@mui/material';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip as ChartTooltip,\n  Legend\n} from 'chart.js';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  ChartTooltip,\n  Legend\n);\n\ninterface AnalysisData {\n  markovChain?: {\n    matrix: Record<string, Record<string, number>>;\n    prediction: number | null;\n    confidence: number;\n    accuracy: number;\n  };\n  entropy?: {\n    entropy: number;\n    prediction: number | null;\n    confidence: number;\n    accuracy: number;\n  };\n  chiSquare?: {\n    chiSquare: number;\n    pValue: number;\n    prediction: number | null;\n    confidence: number;\n    accuracy: number;\n  };\n  monteCarlo?: {\n    simulations: number;\n    prediction: number | null;\n    confidence: number;\n    accuracy: number;\n  };\n}\n\nconst AnalysisPage: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [sequences, setSequences] = useState<number[]>([]);\n  const [analysisData, setAnalysisData] = useState<AnalysisData>({});\n  const [generatingData, setGeneratingData] = useState(false);\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('http://localhost:5000/api/sequences/1');\n      const data = await response.json();\n\n      if (!data || !Array.isArray(data.symbols)) {\n        console.error('Invalid sequence data received:', data);\n        setError('Invalid data format received from server');\n        setSequences([]);\n        return;\n      }\n\n      setSequences(data.symbols);\n      if (data.analyses) {\n        setAnalysisData(data.analyses);\n      }\n    } catch (err) {\n      console.error('Error fetching analysis data:', err);\n      setError('Failed to fetch analysis data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateTestData = async () => {\n    try {\n      setGeneratingData(true);\n      setError(null);\n      \n      const response = await fetch('http://localhost:5000/api/sequences/generate-test-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ count: 90 })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to generate test data');\n      }\n      \n      await fetchData(); // Refresh the analysis after generating data\n    } catch (err) {\n      console.error('Error generating test data:', err);\n      setError('Failed to generate test data');\n    } finally {\n      setGeneratingData(false);\n    }\n  };\n\n  const clearData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch('http://localhost:5000/api/sequences/cleanup', {\n        method: 'POST'\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to clear data');\n      }\n      \n      await fetchData(); // Refresh after clearing\n    } catch (err) {\n      console.error('Error clearing data:', err);\n      setError('Failed to clear data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const renderTransitionMatrix = () => {\n    if (!analysisData.markovChain?.matrix) return null;\n    \n    const matrix = analysisData.markovChain.matrix;\n    const symbols = Array.from(new Set([\n      ...Object.keys(matrix),\n      ...Object.values(matrix).flatMap(row => Object.keys(row))\n    ])).sort();\n\n    return (\n      <TableContainer component={Paper} sx={{ mt: 2 }}>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell>From ↓ To →</TableCell>\n              {symbols.map(symbol => (\n                <TableCell key={symbol}>{symbol}</TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {symbols.map(fromSymbol => (\n              <TableRow key={fromSymbol}>\n                <TableCell component=\"th\" scope=\"row\">{fromSymbol}</TableCell>\n                {symbols.map(toSymbol => (\n                  <TableCell key={toSymbol}>\n                    {(matrix[fromSymbol]?.[toSymbol] || 0).toFixed(2)}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  };\n\n  const renderPredictionCard = (\n    title: string,\n    prediction: number | null,\n    confidence: number,\n    accuracy: number,\n    extraInfo?: React.ReactNode\n  ) => (\n    <Paper elevation={3} sx={{ p: 3, height: '100%' }}>\n      <Typography variant=\"h6\" gutterBottom>\n        {title}\n      </Typography>\n      <Box sx={{ mb: 2 }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Next Symbol Prediction\n        </Typography>\n        <Typography variant=\"h4\">\n          {prediction !== null ? prediction : 'N/A'}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Confidence: {(confidence * 100).toFixed(1)}%\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Historical Accuracy: {(accuracy * 100).toFixed(1)}%\n        </Typography>\n      </Box>\n      {extraInfo}\n    </Paper>\n  );\n\n  const renderChart = () => {\n    if (!Array.isArray(sequences) || sequences.length === 0) {\n      return <Alert severity=\"info\">No sequence data available yet.</Alert>;\n    }\n\n    const chartData = {\n      labels: sequences.map((_, index) => index + 1),\n      datasets: [\n        {\n          label: 'Symbol Values',\n          data: sequences,\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }\n      ]\n    };\n\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top' as const,\n        },\n        title: {\n          display: true,\n          text: 'Sequence Pattern'\n        }\n      }\n    };\n\n    return <Line data={chartData} options={options} />;\n  };\n\n  if (loading && !generatingData) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Container>\n      <Box sx={{ mt: 4, mb: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Typography variant=\"h4\">\n          Analysis Dashboard\n        </Typography>\n        <ButtonGroup variant=\"contained\">\n          <Button\n            startIcon={<AddIcon />}\n            onClick={generateTestData}\n            disabled={loading || generatingData}\n          >\n            Generate Test Data\n          </Button>\n          <Button\n            startIcon={<DeleteIcon />}\n            onClick={clearData}\n            disabled={loading || generatingData}\n            color=\"error\"\n          >\n            Clear Data\n          </Button>\n          <Button\n            startIcon={<RefreshIcon />}\n            onClick={fetchData}\n            disabled={loading || generatingData}\n          >\n            Refresh\n          </Button>\n        </ButtonGroup>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Paper elevation={3} sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Sequence Overview\n            </Typography>\n            {sequences.length === 0 ? (\n              <Alert severity=\"info\">\n                No sequences recorded yet. Use the \"Generate Test Data\" button above to create test data, or add symbols manually in the Game page.\n              </Alert>\n            ) : (\n              <Typography>\n                Total Symbols: {sequences.length}\n              </Typography>\n            )}\n          </Paper>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Paper elevation={3} sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Pattern Visualization\n            </Typography>\n            {renderChart()}\n          </Paper>\n        </Grid>\n\n        {analysisData.markovChain && (\n          <Grid item xs={12}>\n            {renderPredictionCard(\n              'Markov Chain Analysis',\n              analysisData.markovChain.prediction,\n              analysisData.markovChain.confidence,\n              analysisData.markovChain.accuracy,\n              <>\n                <Typography variant=\"h6\" gutterBottom sx={{ mt: 3 }}>\n                  Transition Matrix\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                  This matrix shows the probability of transitioning from one symbol to another.\n                  Each cell represents P(column|row) - the probability of getting the column's symbol after seeing the row's symbol.\n                </Typography>\n                {renderTransitionMatrix()}\n              </>\n            )}\n          </Grid>\n        )}\n\n        <Grid item xs={12} md={6}>\n          {analysisData.entropy && renderPredictionCard(\n            'Entropy Analysis',\n            analysisData.entropy.prediction,\n            analysisData.entropy.confidence,\n            analysisData.entropy.accuracy,\n            <>\n              <Divider sx={{ my: 2 }} />\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Entropy Score: {analysisData.entropy.entropy.toFixed(3)}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Lower entropy indicates more predictable patterns, while higher entropy suggests more randomness.\n              </Typography>\n            </>\n          )}\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          {analysisData.chiSquare && renderPredictionCard(\n            'Chi-Square Test',\n            analysisData.chiSquare.prediction,\n            analysisData.chiSquare.confidence,\n            analysisData.chiSquare.accuracy,\n            <>\n              <Divider sx={{ my: 2 }} />\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                χ² Value: {analysisData.chiSquare.chiSquare.toFixed(3)}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                p-value: {analysisData.chiSquare.pValue.toFixed(3)}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                A low p-value ({\"<\"} 0.05) suggests the sequence is not random.\n              </Typography>\n            </>\n          )}\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          {analysisData.monteCarlo && renderPredictionCard(\n            'Monte Carlo Simulation',\n            analysisData.monteCarlo.prediction,\n            analysisData.monteCarlo.confidence,\n            analysisData.monteCarlo.accuracy,\n            <>\n              <Divider sx={{ my: 2 }} />\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Based on {analysisData.monteCarlo.simulations.toLocaleString()} simulations\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Predictions are made by running multiple simulations using the observed probability distribution.\n              </Typography>\n            </>\n          )}\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default AnalysisPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}