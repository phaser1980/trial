{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\trial\\\\src\\\\pages\\\\GamePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, Grid, Card, CardContent, Typography, Button, Box, ButtonGroup } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = () => {\n  _s();\n  const [sequence, setSequence] = useState([]);\n  const symbols = ['♠', '♥', '♦', '♣'];\n  const addSymbol = async value => {\n    const newSymbol = {\n      value,\n      timestamp: Date.now()\n    };\n    try {\n      await fetch('http://localhost:5000/api/sequences/1/symbol', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          value\n        })\n      });\n      setSequence(prev => [...prev, newSymbol]);\n    } catch (error) {\n      console.error('Error adding symbol:', error);\n    }\n  };\n  const simulateSequence = async () => {\n    for (let i = 0; i < 90; i++) {\n      const randomValue = Math.floor(Math.random() * 4);\n      await addSymbol(randomValue);\n      // Small delay to prevent overwhelming the server\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  };\n  const clearDatabase = async () => {\n    try {\n      await fetch('http://localhost:5000/api/sequences/cleanup', {\n        method: 'DELETE'\n      });\n      setSequence([]);\n    } catch (error) {\n      console.error('Error clearing database:', error);\n    }\n  };\n  const startNew = () => {\n    setSequence([]);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"Card Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        sx: {\n          mb: 4\n        },\n        children: symbols.map((symbol, index) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            fullWidth: true,\n            onClick: () => addSymbol(index),\n            sx: {\n              fontSize: '2rem',\n              height: '80px'\n            },\n            children: symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(ButtonGroup, {\n          variant: \"contained\",\n          color: \"secondary\",\n          fullWidth: true,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: simulateSequence,\n            children: \"Generate 90 Random\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: clearDatabase,\n            children: \"Clear Database\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: startNew,\n            children: \"Start New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Current Sequence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 1,\n              maxHeight: '200px',\n              overflowY: 'auto'\n            },\n            children: sequence.map((item, index) => /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontSize: '1.5rem'\n              },\n              children: symbols[item.value]\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"kJCy3JbUQTbMPQo5sQuA3FZrQTY=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","Container","Grid","Card","CardContent","Typography","Button","Box","ButtonGroup","jsxDEV","_jsxDEV","GamePage","_s","sequence","setSequence","symbols","addSymbol","value","newSymbol","timestamp","Date","now","fetch","method","headers","body","JSON","stringify","prev","error","console","simulateSequence","i","randomValue","Math","floor","random","Promise","resolve","setTimeout","clearDatabase","startNew","maxWidth","children","sx","mt","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","mb","map","symbol","index","item","xs","fullWidth","onClick","fontSize","height","color","display","flexWrap","gap","maxHeight","overflowY","_c","$RefreshReg$"],"sources":["C:/Users/User/trial/src/pages/GamePage.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { \n  Container, \n  Grid, \n  Card, \n  CardContent, \n  Typography, \n  Button,\n  Box,\n  ButtonGroup\n} from '@mui/material';\n\ninterface CardSymbol {\n  value: number;\n  timestamp: number;\n}\n\nconst GamePage: React.FC = () => {\n  const [sequence, setSequence] = useState<CardSymbol[]>([]);\n  const symbols = ['♠', '♥', '♦', '♣'];\n\n  const addSymbol = async (value: number) => {\n    const newSymbol: CardSymbol = {\n      value,\n      timestamp: Date.now()\n    };\n    \n    try {\n      await fetch('http://localhost:5000/api/sequences/1/symbol', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ value }),\n      });\n      \n      setSequence(prev => [...prev, newSymbol]);\n    } catch (error) {\n      console.error('Error adding symbol:', error);\n    }\n  };\n\n  const simulateSequence = async () => {\n    for (let i = 0; i < 90; i++) {\n      const randomValue = Math.floor(Math.random() * 4);\n      await addSymbol(randomValue);\n      // Small delay to prevent overwhelming the server\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  };\n\n  const clearDatabase = async () => {\n    try {\n      await fetch('http://localhost:5000/api/sequences/cleanup', {\n        method: 'DELETE',\n      });\n      setSequence([]);\n    } catch (error) {\n      console.error('Error clearing database:', error);\n    }\n  };\n\n  const startNew = () => {\n    setSequence([]);\n  };\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box sx={{ mt: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Card Game\n        </Typography>\n        \n        <Grid container spacing={2} sx={{ mb: 4 }}>\n          {symbols.map((symbol, index) => (\n            <Grid item xs={3} key={index}>\n              <Button \n                variant=\"contained\" \n                fullWidth \n                onClick={() => addSymbol(index)}\n                sx={{ fontSize: '2rem', height: '80px' }}\n              >\n                {symbol}\n              </Button>\n            </Grid>\n          ))}\n        </Grid>\n\n        <Box sx={{ mb: 4 }}>\n          <ButtonGroup variant=\"contained\" color=\"secondary\" fullWidth>\n            <Button onClick={simulateSequence}>\n              Generate 90 Random\n            </Button>\n            <Button onClick={clearDatabase}>\n              Clear Database\n            </Button>\n            <Button onClick={startNew}>\n              Start New\n            </Button>\n          </ButtonGroup>\n        </Box>\n\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Current Sequence\n            </Typography>\n            <Box sx={{ \n              display: 'flex', \n              flexWrap: 'wrap', \n              gap: 1, \n              maxHeight: '200px', \n              overflowY: 'auto' \n            }}>\n              {sequence.map((item, index) => (\n                <Typography key={index} sx={{ fontSize: '1.5rem' }}>\n                  {symbols[item.value]}\n                </Typography>\n              ))}\n            </Box>\n          </CardContent>\n        </Card>\n      </Box>\n    </Container>\n  );\n};\n\nexport default GamePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}